Shader "Holistic/8/Glass"
{
	Properties
	{
		_MainTex ("Texture", 2D) = "white" {}
		_BumpTex ("Normalmap", 2D) = "bump" {}
		_ScaleUV ("Scale", Range(1,20)) = 1
	}
	SubShader
	{
		Tags{ "Queue" = "Transparent"}
		GrabPass{
			"_RenderedScreenTex"
		}
		Pass
		{
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			
			#include "UnityCG.cginc"

			struct appdata
			{
				float4 vertex : POSITION;
				float2 uv : TEXCOORD0;
			};

			struct v2f
			{
				float2 uv : TEXCOORD0;
				float4 uvgrab: TEXCOORD1;
				float2 uvbump: TEXCOORD2;
				float4 vertex : SV_POSITION;
			};

			sampler2D _RenderedScreenTex; // generated by GrabPass
			float4 _RenderedScreenTex_TexelSize;
			
			sampler2D _MainTex;
			float4 _MainTex_ST;

			sampler2D _BumpTex;
			float4 _BumpTex_ST;
			
			float _ScaleUV;
			
			v2f vert (appdata v)
			{
				v2f o;
				o.vertex = UnityObjectToClipPos(v.vertex); // project from world space to clippling space
				o.uvgrab = ComputeScreenPos(o.vertex); // recalculate from -1,1 -> 0,1

				o.uv = TRANSFORM_TEX(v.uv, _MainTex);
				o.uvbump = TRANSFORM_TEX(v.uv, _BumpTex);

				return o;
			}
			
			fixed4 frag (v2f IN) : SV_Target
			{
				// Calculate some kind of distortion for the glass
				float3 bump = UnpackNormal(tex2D(_BumpTex, IN.uvbump));
				IN.uvgrab.z = 2;
				float2 offset = bump.rg * _ScaleUV * _RenderedScreenTex_TexelSize.xy;
				IN.uvgrab.xy = offset * IN.uvgrab.z + IN.uvgrab.xy;

				fixed4 col = tex2Dproj(_RenderedScreenTex, UNITY_PROJ_COORD(IN.uvgrab));
				fixed4 tint = tex2D(_MainTex, IN.uv);
				col *= tint;
				return col;
			}
			ENDCG
		}
	}
}
